version: '3.8'

services:
  # Frontend - Next.js Application
  frontend:
    build:
      context: ../lastminutestay-frontend
      dockerfile: Dockerfile.production
    container_name: hotel-booking-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.hotel-booking.com
      - NEXT_PUBLIC_CDN_URL=https://cdn.hotel-booking.com
      - NEXT_PUBLIC_WEBXR_ENABLED=true
      - NEXT_PUBLIC_ENABLE_3D_TOUR=true
      - NEXT_PUBLIC_ENABLE_AR_PREVIEW=true
      - NEXT_PUBLIC_ENABLE_VR_MODE=true
      - NEXTAUTH_URL=https://hotel-booking.com
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    ports:
      - "3000:3000"
    volumes:
      - frontend_static:/app/.next/static
      - frontend_public:/app/public
    networks:
      - hotel-network
    depends_on:
      - backend
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`hotel-booking.com`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.production
    container_name: hotel-booking-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGIN=https://hotel-booking.com
    ports:
      - "3001:3001"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - hotel-network
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.hotel-booking.com`)"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: hotel-booking-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hotel-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: hotel-booking-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hotel-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hotel-booking-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/ssl/certs
      - frontend_static:/var/www/static
      - backend_uploads:/var/www/uploads
    networks:
      - hotel-network
    depends_on:
      - frontend
      - backend
    labels:
      - "traefik.enable=false"

  # Traefik Reverse Proxy (Alternative to Nginx)
  traefik:
    image: traefik:v2.10
    container_name: hotel-booking-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_acme:/acme.json
    networks:
      - hotel-network
    profiles:
      - traefik

  # WebSocket Server for real-time updates
  websocket:
    build:
      context: ../websocket-server
      dockerfile: Dockerfile
    container_name: hotel-booking-ws
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "3002:3002"
    networks:
      - hotel-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.websocket.rule=Host(`ws.hotel-booking.com`)"
      - "traefik.http.routers.websocket.tls=true"
      - "traefik.http.routers.websocket.tls.certresolver=letsencrypt"

  # Asset CDN Server
  cdn:
    image: nginx:alpine
    container_name: hotel-booking-cdn
    restart: unless-stopped
    ports:
      - "8081:80"
    volumes:
      - ./cdn/nginx.conf:/etc/nginx/nginx.conf
      - cdn_assets:/usr/share/nginx/html
    networks:
      - hotel-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cdn.rule=Host(`cdn.hotel-booking.com`)"
      - "traefik.http.routers.cdn.tls=true"
      - "traefik.http.routers.cdn.tls.certresolver=letsencrypt"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: hotel-booking-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - hotel-network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: hotel-booking-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - hotel-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Log aggregation - ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: hotel-booking-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - hotel-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: hotel-booking-logstash
    restart: unless-stopped
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - hotel-network
    depends_on:
      - elasticsearch
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: hotel-booking-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - hotel-network
    depends_on:
      - elasticsearch
    profiles:
      - logging

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  frontend_static:
    driver: local
  frontend_public:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  cdn_assets:
    driver: local
  traefik_acme:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  hotel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16