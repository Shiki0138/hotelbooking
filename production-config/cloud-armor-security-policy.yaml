# Cloud Armor Security Policy for Hotel Booking System
# 史上最強のセキュリティ設定 - worker4実装

name: hotelbooking-cloud-armor-policy
description: "Comprehensive Cloud Armor security policy for hotel booking API"
type: CLOUD_ARMOR

# Priority Rules (lower number = higher priority)
rules:
  # 🚫 Block Known Malicious IPs
  - priority: 1000
    action: deny(403)
    description: "Block known malicious IP addresses"
    match:
      expr:
        expression: 'origin.ip in ["192.168.1.100", "10.0.0.1"]'
    
  # 🚫 Geographic Restrictions  
  - priority: 1100
    action: deny(403)
    description: "Block requests from restricted regions"
    match:
      expr:
        expression: 'origin.region_code in ["XX", "YY"]'
        
  # 🛡️ SQL Injection Protection
  - priority: 2000
    action: deny(403)
    description: "Block SQL injection attempts"
    match:
      expr:
        expression: >
          request.url_map.path.matches("(?i).*('|(\\%27))((union(\\s|%20|%09|%0A|%0B|%0C|%0D)+select)|
          (select(\\s|%20|%09|%0A|%0B|%0C|%0D)+.*(from|where))|
          (or(\\s|%20|%09|%0A|%0B|%0C|%0D)+.*(=|like))|
          (exec(\\s|%20|%09|%0A|%0B|%0C|%0D)+.*(xp_|sp_))|
          (drop(\\s|%20|%09|%0A|%0B|%0C|%0D)+table)|
          (insert(\\s|%20|%09|%0A|%0B|%0C|%0D)+into)|
          (delete(\\s|%20|%09|%0A|%0B|%0C|%0D)+from)).*")
          
  # 🛡️ XSS Protection
  - priority: 2100
    action: deny(403)
    description: "Block XSS attempts"
    match:
      expr:
        expression: >
          request.url_map.path.matches("(?i).*(<script|javascript:|vbscript:|onload=|onerror=|
          <iframe|<object|<embed|<applet|<meta|<link).*")
          
  # 🛡️ Path Traversal Protection
  - priority: 2200
    action: deny(403)
    description: "Block path traversal attempts"
    match:
      expr:
        expression: >
          request.url_map.path.matches(".*(\\.\\./|\\.\\.\\\|%2e%2e%2f|%2e%2e%5c|
          %252e%252e%252f|%252e%252e%255c).*")
          
  # 🛡️ Command Injection Protection
  - priority: 2300
    action: deny(403)
    description: "Block command injection attempts"
    match:
      expr:
        expression: >
          request.url_map.path.matches("(?i).*(;|\\||&|`|\\$\\(|\\${|<\\(|>\\(|
          \\x00|%00|cat|grep|wget|curl|nc|telnet|ssh).*")

  # 🚨 Rate Limiting - API Endpoints
  - priority: 3000
    action: throttle
    description: "API rate limiting - 100 requests per minute"
    match:
      expr:
        expression: 'request.url_map.path.startsWith("/api/")'
    rateLimitOptions:
      rateLimitThreshold:
        count: 100
        intervalSec: 60
      conformAction: allow
      exceedAction: deny(429)
      enforceOnKey: IP
      
  # 🚨 Strict Rate Limiting - Authentication Endpoints
  - priority: 3100
    action: throttle
    description: "Auth rate limiting - 5 requests per 5 minutes"
    match:
      expr:
        expression: 'request.url_map.path.startsWith("/api/auth/")'
    rateLimitOptions:
      rateLimitThreshold:
        count: 5
        intervalSec: 300
      conformAction: allow
      exceedAction: deny(429)
      enforceOnKey: IP
      
  # 🚨 Booking Rate Limiting
  - priority: 3200
    action: throttle
    description: "Booking rate limiting - 10 requests per 15 minutes"
    match:
      expr:
        expression: 'request.url_map.path.startsWith("/api/bookings")'
    rateLimitOptions:
      rateLimitThreshold:
        count: 10
        intervalSec: 900
      conformAction: allow
      exceedAction: deny(429)
      enforceOnKey: IP
      
  # 🔍 Suspicious User-Agent Detection
  - priority: 4000
    action: deny(403)
    description: "Block suspicious user agents"
    match:
      expr:
        expression: >
          request.headers["user-agent"].matches("(?i).*(bot|crawler|spider|scraper|
          scanner|curl|wget|python|java|php|perl|ruby|go-http|libwww|
          nikto|sqlmap|nmap|masscan|zap|burp).*")
          
  # 🔍 Block Empty User-Agent
  - priority: 4100
    action: deny(403)
    description: "Block requests with empty user agent"
    match:
      expr:
        expression: 'request.headers["user-agent"] == ""'
        
  # 🛡️ Method Restriction
  - priority: 5000
    action: deny(405)
    description: "Block non-standard HTTP methods"
    match:
      expr:
        expression: >
          request.method != "GET" && request.method != "POST" && 
          request.method != "PUT" && request.method != "DELETE" && 
          request.method != "PATCH" && request.method != "OPTIONS"
          
  # 🔒 HTTPS Enforcement
  - priority: 5100
    action: redirect
    description: "Redirect HTTP to HTTPS"
    redirectOptions:
      type: EXTERNAL_302
      target: "https://api.hotelbooking.com${request.url_map.path}"
    match:
      expr:
        expression: 'request.scheme == "http"'
        
  # 🛡️ Content-Length Validation
  - priority: 6000
    action: deny(413)
    description: "Block requests with excessive content length"
    match:
      expr:
        expression: 'int(request.headers["content-length"]) > 10485760' # 10MB
        
  # 🔍 Suspicious Header Detection
  - priority: 6100
    action: deny(400)
    description: "Block requests with suspicious headers"
    match:
      expr:
        expression: >
          request.headers.keys().matches("(?i).*(x-forwarded-for|x-real-ip|
          x-cluster-client-ip|cf-connecting-ip|true-client-ip).*") &&
          request.headers.values().matches(".*,.*,.*")
          
  # 🚫 Block Common Attack Patterns
  - priority: 7000
    action: deny(403)
    description: "Block common attack patterns in URL"
    match:
      expr:
        expression: >
          request.url_map.path.matches("(?i).*(wp-admin|phpmyadmin|admin|administrator|
          wp-login|wp-config|config|backup|test|temp|tmp|log|logs|
          .env|.git|.svn|.htaccess|web.config).*")
          
  # 🔍 Monitoring and Logging Rule
  - priority: 8000
    action: allow
    description: "Allow and log all other requests"
    match:
      expr:
        expression: 'true'
    preconfiguredWafConfig:
      exclusions:
        - targetRuleSet: "owasp-crs-v030301-id942110-sqli"
          targetRuleIds: ["942110", "942120", "942130"]
          requestQueryParams:
            - fieldName: "search"
            - fieldName: "query"
            
# Advanced Configuration
adaptiveProtection:
  layer7DdosDefenseConfig:
    enable: true
    ruleVisibility: STANDARD
    
# モニタリング設定
defaultRuleAction: allow
logConfig:
  enable: true
  sampleRate: 1.0 # Log 100% of requests

# セキュリティエッジ設定
edgeSecurityPolicy:
  # Bot Management
  botManagement:
    enable: true
    # 悪質なボットをブロック
    # 正規のボット（Googlebot等）は許可
    
  # DDoS Protection
  ddosProtection:
    enable: true
    # Layer 3/4 DDoS protection
    # Automatic attack detection and mitigation