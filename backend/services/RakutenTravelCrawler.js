/**
 * üè® Ê•ΩÂ§©„Éà„É©„Éô„É´API „ÇØ„É≠„Éº„É©„Éº
 * È´òÁ¥ö„Éõ„ÉÜ„É´Áõ¥Ââç‰∫àÁ¥Ñ„Ç∑„Çπ„ÉÜ„É†Â∞ÇÁî®
 * 
 * Ê©üËÉΩ:
 * - Ê•ΩÂ§©„Éà„É©„Éô„É´API„Åã„ÇâÈ´òÁ¥ö„Éõ„ÉÜ„É´ÊÉÖÂ†±„ÇíÂèñÂæó
 * - Áõ¥ÂâçÂâ≤Âºï„Éª„Ç≠„É£„É≥„Çª„É´ÊÉÖÂ†±„ÅÆËá™Âãï„ÇØ„É≠„Éº„É™„É≥„Ç∞
 * - ‰æ°Ê†ºÂ§âÂãï„ÅÆËøΩË∑°„ÉªË®òÈå≤
 * - 15ÂàÜÈñìÈöî„Åß„ÅÆËá™ÂãïÊõ¥Êñ∞
 * 
 * @author worker1 („Éõ„ÉÜ„É´„ÇØ„É≠„Éº„É™„É≥„Ç∞„Éª„Éá„Éº„ÇøÂèéÈõÜ„Ç∑„Çπ„ÉÜ„É†ÊãÖÂΩì)
 * @date 2025-07-05
 */

const axios = require('axios');
const { supabaseAdmin } = require('../config/supabase');

class RakutenTravelCrawler {
    constructor() {
        this.apiKey = process.env.RAKUTEN_API_KEY;
        this.applicationId = process.env.RAKUTEN_APPLICATION_ID;
        this.baseURL = 'https://app.rakuten.co.jp/services/api';
        this.rateLimitDelay = 1000; // 1ÁßíÈñìÈöîÔºà„É¨„Éº„ÉàÂà∂ÈôêÂØæÁ≠ñÔºâ
        this.maxRetries = 3;
        this.timeout = 30000; // 30Áßí„Çø„Ç§„É†„Ç¢„Ç¶„Éà
        
        // API „Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
        this.endpoints = {
            hotel: '/Travel/SimpleHotelSearch/20170426',
            vacancy: '/Travel/VacantHotelSearch/20170426',
            hotelDetail: '/Travel/HotelDetailSearch/20170426',
            ranking: '/Travel/HotelRanking/20170426'
        };

        // È´òÁ¥ö„Éõ„ÉÜ„É´Ê§úÁ¥¢Êù°‰ª∂
        this.luxurySearchParams = {
            classCode: '5,4', // 4-5„Å§Êòü„Éõ„ÉÜ„É´
            minCharge: 30000, // ÊúÄ‰Ωé30,000ÂÜÜ‰ª•‰∏ä
            searchRadius: 3, // Ê§úÁ¥¢ÂçäÂæÑ3km
            sort: 'standard' // Ê®ôÊ∫ñ„ÇΩ„Éº„Éà
        };

        // ‰∏ªË¶ÅÈÉΩÂ∏Ç„ÅÆÁ∑ØÂ∫¶ÁµåÂ∫¶
        this.majorCities = [
            { name: 'Êù±‰∫¨', latitude: 35.6762, longitude: 139.6503, areaCode: '130000' },
            { name: 'Â§ßÈò™', latitude: 34.6937, longitude: 135.5023, areaCode: '270000' },
            { name: '‰∫¨ÈÉΩ', latitude: 35.0116, longitude: 135.7681, areaCode: '260000' },
            { name: 'Ê®™Êµú', latitude: 35.4437, longitude: 139.6380, areaCode: '140000' },
            { name: 'Á¶èÂ≤°', latitude: 33.5904, longitude: 130.4017, areaCode: '400000' },
            { name: 'Ê≤ñÁ∏Ñ', latitude: 26.2124, longitude: 127.6792, areaCode: '470000' }
        ];
    }

    /**
     * Ê•ΩÂ§©API„ÇØ„É©„Ç§„Ç¢„É≥„ÉàÂàùÊúüÂåñ
     */
    initializeApiClient() {
        this.apiClient = axios.create({
            baseURL: this.baseURL,
            timeout: this.timeout,
            headers: {
                'User-Agent': 'LastMinuteStay-Crawler/1.0',
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        });

        // „É™„ÇØ„Ç®„Çπ„Éà„Ç§„É≥„Çø„Éº„Çª„Éó„Çø„ÉºÔºà„É¨„Éº„ÉàÂà∂ÈôêÂØæÁ≠ñÔºâ
        this.apiClient.interceptors.request.use(async (config) => {
            await this.sleep(this.rateLimitDelay);
            return config;
        });

        // „É¨„Çπ„Éù„É≥„Çπ„Ç§„É≥„Çø„Éº„Çª„Éó„Çø„ÉºÔºà„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Ôºâ
        this.apiClient.interceptors.response.use(
            response => response,
            async error => {
                if (error.response?.status === 429) {
                    // „É¨„Éº„ÉàÂà∂Èôê„Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÄÅÂæÖÊ©ü„Åó„Å¶ÂÜçË©¶Ë°å
                    await this.sleep(5000);
                    return this.apiClient.request(error.config);
                }
                throw error;
            }
        );
    }

    /**
     * ÊåáÂÆöÊôÇÈñìÂæÖÊ©ü
     */
    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * „ÇØ„É≠„Éº„É™„É≥„Ç∞ÂÆüË°å„É≠„Ç∞„ÇíÈñãÂßã
     */
    async startCrawlingLog(crawlType, totalItems = 0) {
        const executionId = `${crawlType}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        
        const { data, error } = await supabaseAdmin
            .from('crawling_logs')
            .insert({
                crawl_type: crawlType,
                api_source: 'rakuten',
                execution_id: executionId,
                status: 'running',
                total_items: totalItems,
                configuration: {
                    luxurySearchParams: this.luxurySearchParams,
                    cities: this.majorCities.length,
                    rateLimitDelay: this.rateLimitDelay
                }
            })
            .select()
            .single();

        if (error) {
            console.error('„ÇØ„É≠„Éº„É™„É≥„Ç∞„É≠„Ç∞ÈñãÂßã„Ç®„É©„Éº:', error);
            return null;
        }

        return data;
    }

    /**
     * „ÇØ„É≠„Éº„É™„É≥„Ç∞ÂÆüË°å„É≠„Ç∞„ÇíÊõ¥Êñ∞
     */
    async updateCrawlingLog(logId, updates) {
        const { error } = await supabaseAdmin
            .from('crawling_logs')
            .update({
                ...updates,
                completed_at: updates.status === 'completed' ? new Date().toISOString() : null
            })
            .eq('id', logId);

        if (error) {
            console.error('„ÇØ„É≠„Éº„É™„É≥„Ç∞„É≠„Ç∞Êõ¥Êñ∞„Ç®„É©„Éº:', error);
        }
    }

    /**
     * API‰ΩøÁî®Èáè„ÇíË®òÈå≤
     */
    async trackApiUsage(endpoint, responseTime, isSuccess = true) {
        const now = new Date();
        const date = now.toISOString().split('T')[0];
        const hour = now.getHours();

        const { error } = await supabaseAdmin
            .from('api_usage_tracking')
            .upsert({
                api_source: 'rakuten',
                date,
                hour,
                total_calls: 1,
                successful_calls: isSuccess ? 1 : 0,
                failed_calls: isSuccess ? 0 : 1,
                avg_response_time_ms: responseTime
            }, {
                onConflict: 'api_source,date,hour',
                ignoreDuplicates: false
            });

        if (error) {
            console.error('API‰ΩøÁî®ÈáèË®òÈå≤„Ç®„É©„Éº:', error);
        }
    }

    /**
     * Ê•ΩÂ§©API„É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°åÔºà„É™„Éà„É©„Ç§Ê©üËÉΩ‰ªò„ÅçÔºâ
     */
    async makeApiRequest(endpoint, params, retryCount = 0) {
        try {
            const startTime = Date.now();
            
            const response = await this.apiClient.get(endpoint, {
                params: {
                    applicationId: this.applicationId,
                    format: 'json',
                    ...params
                }
            });

            const responseTime = Date.now() - startTime;
            await this.trackApiUsage(endpoint, responseTime, true);

            return response.data;
        } catch (error) {
            const responseTime = Date.now() - Date.now();
            await this.trackApiUsage(endpoint, responseTime, false);

            console.error(`Ê•ΩÂ§©API „Ç®„É©„Éº (Ë©¶Ë°å${retryCount + 1}):`, error.message);

            if (retryCount < this.maxRetries) {
                const delay = Math.pow(2, retryCount) * 1000; // ÊåáÊï∞„Éê„ÉÉ„ÇØ„Ç™„Éï
                await this.sleep(delay);
                return this.makeApiRequest(endpoint, params, retryCount + 1);
            }

            throw error;
        }
    }

    /**
     * È´òÁ¥ö„Éõ„ÉÜ„É´Âü∫Êú¨ÊÉÖÂ†±„Çí„ÇØ„É≠„Éº„É™„É≥„Ç∞
     */
    async crawlLuxuryHotels() {
        const log = await this.startCrawlingLog('hotels', this.majorCities.length);
        let processedItems = 0;
        let successfulItems = 0;
        let failedItems = 0;

        try {
            this.initializeApiClient();

            for (const city of this.majorCities) {
                try {
                    console.log(`${city.name}„ÅÆÈ´òÁ¥ö„Éõ„ÉÜ„É´„Çí„ÇØ„É≠„Éº„É™„É≥„Ç∞‰∏≠...`);

                    const params = {
                        ...this.luxurySearchParams,
                        latitude: city.latitude,
                        longitude: city.longitude,
                        hits: 30 // 1Âõû„ÅÆ„É™„ÇØ„Ç®„Çπ„Éà„ÅßÊúÄÂ§ß30‰ª∂ÂèñÂæó
                    };

                    const result = await this.makeApiRequest(this.endpoints.hotel, params);
                    
                    if (result && result.hotels) {
                        for (const hotelData of result.hotels) {
                            await this.saveHotelData(hotelData.hotel, city);
                            successfulItems++;
                        }
                    }

                    processedItems++;
                } catch (error) {
                    console.error(`${city.name}„ÅÆ„ÇØ„É≠„Éº„É™„É≥„Ç∞„Ç®„É©„Éº:`, error.message);
                    failedItems++;
                    processedItems++;
                }
            }

            // „É≠„Ç∞Êõ¥Êñ∞
            if (log) {
                await this.updateCrawlingLog(log.id, {
                    status: 'completed',
                    processed_items: processedItems,
                    successful_items: successfulItems,
                    failed_items: failedItems,
                    duration_seconds: Math.floor((Date.now() - new Date(log.started_at).getTime()) / 1000)
                });
            }

            console.log(`È´òÁ¥ö„Éõ„ÉÜ„É´„ÇØ„É≠„Éº„É™„É≥„Ç∞ÂÆå‰∫Ü: ÊàêÂäü${successfulItems}‰ª∂„ÄÅÂ§±Êïó${failedItems}‰ª∂`);
            return { success: true, processed: processedItems, successful: successfulItems, failed: failedItems };

        } catch (error) {
            if (log) {
                await this.updateCrawlingLog(log.id, {
                    status: 'failed',
                    error_message: error.message,
                    processed_items: processedItems,
                    successful_items: successfulItems,
                    failed_items: failedItems
                });
            }
            throw error;
        }
    }

    /**
     * „Éõ„ÉÜ„É´„Éá„Éº„Çø„Çí„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò
     */
    async saveHotelData(hotelData, city) {
        try {
            const hotelRecord = {
                hotel_code: `rakuten_${hotelData.hotelNo}`,
                name: hotelData.hotelName,
                name_kana: hotelData.hotelKanaName,
                prefecture_name: city.name,
                city: city.name,
                address: hotelData.address1 + ' ' + (hotelData.address2 || ''),
                latitude: parseFloat(hotelData.latitude) || city.latitude,
                longitude: parseFloat(hotelData.longitude) || city.longitude,
                phone: hotelData.telephoneNo,
                url: hotelData.hotelInformationUrl,
                hotel_class: this.parseHotelClass(hotelData.reviewAverage),
                hotel_type: 'luxury',
                total_rooms: hotelData.roomCount || null,
                api_source: 'rakuten',
                api_hotel_id: hotelData.hotelNo.toString(),
                api_last_updated: new Date().toISOString(),
                is_luxury: true,
                is_active: true,
                crawl_priority: 1,
                last_crawled_at: new Date().toISOString()
            };

            const { error } = await supabaseAdmin
                .from('hotels_crawling')
                .upsert(hotelRecord, {
                    onConflict: 'hotel_code',
                    ignoreDuplicates: false
                });

            if (error) {
                console.error('„Éõ„ÉÜ„É´„Éá„Éº„Çø‰øùÂ≠ò„Ç®„É©„Éº:', error);
                throw error;
            }

            console.log(`„Éõ„ÉÜ„É´‰øùÂ≠òÂÆå‰∫Ü: ${hotelData.hotelName}`);
        } catch (error) {
            console.error(`„Éõ„ÉÜ„É´„Éá„Éº„Çø‰øùÂ≠òÂ§±Êïó: ${hotelData.hotelName}`, error);
            throw error;
        }
    }

    /**
     * „Éõ„ÉÜ„É´„ÇØ„É©„Çπ„ÇíË©ï‰æ°„Åã„ÇâÊé®ÂÆö
     */
    parseHotelClass(reviewAverage) {
        if (!reviewAverage) return 4;
        const rating = parseFloat(reviewAverage);
        if (rating >= 4.5) return 5;
        if (rating >= 4.0) return 4;
        if (rating >= 3.5) return 3;
        if (rating >= 3.0) return 2;
        return 1;
    }

    /**
     * Á©∫ÂÆ§„Éª‰æ°Ê†ºÊÉÖÂ†±„Çí„ÇØ„É≠„Éº„É™„É≥„Ç∞
     */
    async crawlAvailabilityAndPrices() {
        const log = await this.startCrawlingLog('availability');
        let processedItems = 0;
        let successfulItems = 0;
        let failedItems = 0;

        try {
            this.initializeApiClient();

            // „Éá„Éº„Çø„Éô„Éº„Çπ„Åã„ÇâÈ´òÁ¥ö„Éõ„ÉÜ„É´‰∏ÄË¶ß„ÇíÂèñÂæó
            const { data: hotels, error } = await supabaseAdmin
                .from('hotels_crawling')
                .select('*')
                .eq('is_luxury', true)
                .eq('is_active', true)
                .eq('api_source', 'rakuten')
                .order('crawl_priority', { ascending: true })
                .limit(50); // 1Âõû„ÅÆ„ÇØ„É≠„Éº„É™„É≥„Ç∞„Åß50„Éõ„ÉÜ„É´„Åæ„Åß

            if (error) {
                throw new Error(`„Éõ„ÉÜ„É´‰∏ÄË¶ßÂèñÂæó„Ç®„É©„Éº: ${error.message}`);
            }

            // „É≠„Ç∞„ÅÆÂêàË®à„Ç¢„Ç§„ÉÜ„É†Êï∞„ÇíÊõ¥Êñ∞
            if (log) {
                await this.updateCrawlingLog(log.id, { total_items: hotels.length });
            }

            // Ê§úÁ¥¢Êó•Á®ã„ÇíË®≠ÂÆöÔºà‰ªäÊó•„Åã„Çâ7Êó•Âæå„Åæ„ÅßÔºâ
            const searchDates = this.generateSearchDates(7);

            for (const hotel of hotels) {
                try {
                    console.log(`${hotel.name}„ÅÆÁ©∫ÂÆ§ÊÉÖÂ†±„Çí„ÇØ„É≠„Éº„É™„É≥„Ç∞‰∏≠...`);

                    for (const dateRange of searchDates) {
                        await this.crawlHotelAvailability(hotel, dateRange);
                    }

                    successfulItems++;
                } catch (error) {
                    console.error(`${hotel.name}„ÅÆ„ÇØ„É≠„Éº„É™„É≥„Ç∞„Ç®„É©„Éº:`, error.message);
                    failedItems++;
                }
                processedItems++;
            }

            // „É≠„Ç∞Êõ¥Êñ∞
            if (log) {
                await this.updateCrawlingLog(log.id, {
                    status: 'completed',
                    processed_items: processedItems,
                    successful_items: successfulItems,
                    failed_items: failedItems,
                    duration_seconds: Math.floor((Date.now() - new Date(log.started_at).getTime()) / 1000)
                });
            }

            console.log(`Á©∫ÂÆ§„Éª‰æ°Ê†º„ÇØ„É≠„Éº„É™„É≥„Ç∞ÂÆå‰∫Ü: ÊàêÂäü${successfulItems}‰ª∂„ÄÅÂ§±Êïó${failedItems}‰ª∂`);
            return { success: true, processed: processedItems, successful: successfulItems, failed: failedItems };

        } catch (error) {
            if (log) {
                await this.updateCrawlingLog(log.id, {
                    status: 'failed',
                    error_message: error.message,
                    processed_items: processedItems,
                    successful_items: successfulItems,
                    failed_items: failedItems
                });
            }
            throw error;
        }
    }

    /**
     * Ê§úÁ¥¢Êó•Á®ã„ÇíÁîüÊàê
     */
    generateSearchDates(days) {
        const dates = [];
        const today = new Date();

        for (let i = 0; i < days; i++) {
            const checkIn = new Date(today);
            checkIn.setDate(today.getDate() + i);
            
            const checkOut = new Date(checkIn);
            checkOut.setDate(checkIn.getDate() + 1);

            dates.push({
                checkInDate: checkIn.toISOString().split('T')[0],
                checkOutDate: checkOut.toISOString().split('T')[0],
                daysUntilCheckin: i
            });
        }

        return dates;
    }

    /**
     * ÁâπÂÆö„Éõ„ÉÜ„É´„ÅÆÁ©∫ÂÆ§ÊÉÖÂ†±„Çí„ÇØ„É≠„Éº„É™„É≥„Ç∞
     */
    async crawlHotelAvailability(hotel, dateRange) {
        try {
            const params = {
                latitude: hotel.latitude,
                longitude: hotel.longitude,
                checkinDate: dateRange.checkInDate,
                checkoutDate: dateRange.checkOutDate,
                searchRadius: 1, // 1km‰ª•ÂÜÖ
                minCharge: 20000, // ÊúÄ‰Ωé20,000ÂÜÜ
                hits: 10
            };

            const result = await this.makeApiRequest(this.endpoints.vacancy, params);

            if (result && result.hotels) {
                for (const hotelData of result.hotels) {
                    if (hotelData.hotel.hotelNo.toString() === hotel.api_hotel_id) {
                        await this.saveAvailabilityData(hotel, hotelData, dateRange);
                        break;
                    }
                }
            }
        } catch (error) {
            console.error(`${hotel.name}„ÅÆÁ©∫ÂÆ§ÊÉÖÂ†±ÂèñÂæó„Ç®„É©„Éº:`, error.message);
            throw error;
        }
    }

    /**
     * Á©∫ÂÆ§„Éá„Éº„Çø„Çí„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò
     */
    async saveAvailabilityData(hotel, hotelData, dateRange) {
        try {
            const roomInfos = hotelData.hotel.roomInfo || [];

            for (const roomInfo of roomInfos) {
                // Áõ¥ÂâçÂâ≤ÂºïÂà§ÂÆöÔºà„ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥3Êó•Ââç‰ª•Èôç„Åã„Å§Ââ≤ÂºïÁéá20%‰ª•‰∏äÔºâ
                const isLastMinute = dateRange.daysUntilCheckin <= 3;
                const originalPrice = roomInfo.total || roomInfo.charge;
                const currentPrice = roomInfo.total || roomInfo.charge;
                const discountRate = 0; // Ê•ΩÂ§©API„Åß„ÅØÁõ¥Êé•Ââ≤ÂºïÁéá„ÅåÂèñÂæó„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅåÂ§ö„ÅÑ

                const availabilityRecord = {
                    hotel_id: hotel.id,
                    check_date: new Date().toISOString().split('T')[0],
                    check_in_date: dateRange.checkInDate,
                    check_out_date: dateRange.checkOutDate,
                    nights: 1,
                    room_type_code: roomInfo.roomClass || 'standard',
                    room_type_name: roomInfo.roomName || 'ÂÆ¢ÂÆ§',
                    room_count: 1,
                    available_rooms: roomInfo.reserve === 'OK' ? 5 : 0, // Ê•ΩÂ§©API„Åß„ÅØÂÖ∑‰ΩìÁöÑ„Å™Á©∫ÂÆ§Êï∞‰∏çÊòé
                    original_price: originalPrice,
                    current_price: currentPrice,
                    discount_rate: discountRate,
                    is_last_minute: isLastMinute,
                    min_nights: 1,
                    max_nights: 7,
                    min_guests: 1,
                    max_guests: roomInfo.maxCapacity || 2,
                    api_source: 'rakuten',
                    api_plan_id: roomInfo.planId?.toString(),
                    api_room_id: roomInfo.roomClass,
                    crawled_at: new Date().toISOString(),
                    expires_at: new Date(Date.now() + 4 * 60 * 60 * 1000).toISOString() // 4ÊôÇÈñìÂæå„Å´ÊúüÈôêÂàá„Çå
                };

                const { error } = await supabaseAdmin
                    .from('availability_crawling')
                    .upsert(availabilityRecord, {
                        onConflict: 'hotel_id,check_in_date,check_out_date,room_type_code,api_source',
                        ignoreDuplicates: false
                    });

                if (error) {
                    console.error('Á©∫ÂÆ§„Éá„Éº„Çø‰øùÂ≠ò„Ç®„É©„Éº:', error);
                } else {
                    // ‰æ°Ê†ºÂ±•Ê≠¥„ÇÇÂêåÊôÇ„Å´Ë®òÈå≤
                    await this.savePriceHistory(hotel, availabilityRecord, dateRange);
                }
            }
        } catch (error) {
            console.error(`Á©∫ÂÆ§„Éá„Éº„Çø‰øùÂ≠òÂ§±Êïó: ${hotel.name}`, error);
            throw error;
        }
    }

    /**
     * ‰æ°Ê†ºÂ±•Ê≠¥„Çí„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò
     */
    async savePriceHistory(hotel, availabilityData, dateRange) {
        try {
            const priceHistoryRecord = {
                hotel_id: hotel.id,
                check_in_date: availabilityData.check_in_date,
                check_out_date: availabilityData.check_out_date,
                room_type_code: availabilityData.room_type_code,
                price: availabilityData.current_price,
                original_price: availabilityData.original_price,
                discount_rate: availabilityData.discount_rate,
                available_rooms: availabilityData.available_rooms,
                days_before_checkin: dateRange.daysUntilCheckin,
                is_weekend: this.isWeekend(new Date(availabilityData.check_in_date)),
                is_holiday: false, // Á•ùÊó•Âà§ÂÆö„ÅØÂà•ÈÄîÂÆüË£Ö
                season: this.getSeason(new Date(availabilityData.check_in_date)),
                api_source: 'rakuten',
                crawled_at: new Date().toISOString()
            };

            const { error } = await supabaseAdmin
                .from('price_history_crawling')
                .insert(priceHistoryRecord);

            if (error) {
                console.error('‰æ°Ê†ºÂ±•Ê≠¥‰øùÂ≠ò„Ç®„É©„Éº:', error);
            }
        } catch (error) {
            console.error(`‰æ°Ê†ºÂ±•Ê≠¥‰øùÂ≠òÂ§±Êïó: ${hotel.name}`, error);
        }
    }

    /**
     * ÈÄ±Êú´Âà§ÂÆö
     */
    isWeekend(date) {
        const day = date.getDay();
        return day === 0 || day === 6; // Êó•ÊõúÊó•„Åæ„Åü„ÅØÂúüÊõúÊó•
    }

    /**
     * Â≠£ÁØÄÂà§ÂÆö
     */
    getSeason(date) {
        const month = date.getMonth() + 1;
        if (month >= 3 && month <= 5) return 'spring';
        if (month >= 6 && month <= 8) return 'summer';
        if (month >= 9 && month <= 11) return 'autumn';
        return 'winter';
    }

    /**
     * „Éï„É´„ÇØ„É≠„Éº„É™„É≥„Ç∞ÂÆüË°åÔºà„Éõ„ÉÜ„É´ÊÉÖÂ†± + Á©∫ÂÆ§„Éª‰æ°Ê†ºÊÉÖÂ†±Ôºâ
     */
    async runFullCrawling() {
        try {
            console.log('üè® Ê•ΩÂ§©„Éà„É©„Éô„É´ „Éï„É´„ÇØ„É≠„Éº„É™„É≥„Ç∞ÈñãÂßã...');
            
            // 1. „Éõ„ÉÜ„É´Âü∫Êú¨ÊÉÖÂ†±„Çí„ÇØ„É≠„Éº„É™„É≥„Ç∞
            console.log('üìç Step 1: „Éõ„ÉÜ„É´Âü∫Êú¨ÊÉÖÂ†±„Çí„ÇØ„É≠„Éº„É™„É≥„Ç∞‰∏≠...');
            const hotelResult = await this.crawlLuxuryHotels();
            
            // 2. Á©∫ÂÆ§„Éª‰æ°Ê†ºÊÉÖÂ†±„Çí„ÇØ„É≠„Éº„É™„É≥„Ç∞
            console.log('üí∞ Step 2: Á©∫ÂÆ§„Éª‰æ°Ê†ºÊÉÖÂ†±„Çí„ÇØ„É≠„Éº„É™„É≥„Ç∞‰∏≠...');
            const availabilityResult = await this.crawlAvailabilityAndPrices();
            
            console.log('‚úÖ Ê•ΩÂ§©„Éà„É©„Éô„É´ „Éï„É´„ÇØ„É≠„Éº„É™„É≥„Ç∞ÂÆå‰∫Ü!');
            return {
                success: true,
                hotels: hotelResult,
                availability: availabilityResult,
                timestamp: new Date().toISOString()
            };
            
        } catch (error) {
            console.error('‚ùå Ê•ΩÂ§©„Éà„É©„Éô„É´ „ÇØ„É≠„Éº„É™„É≥„Ç∞„Ç®„É©„Éº:', error);
            throw error;
        }
    }
}

module.exports = RakutenTravelCrawler;