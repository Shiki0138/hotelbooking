# Hotel Booking System - Production CI/CD Pipeline
# 史上最強のCI/CDパイプライン - worker4実装
# Created: 2025-06-29

name: 🚀 Production Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  BACKEND_REPOSITORY: hotelbooking-backend
  FRONTEND_REPOSITORY: hotelbooking-frontend
  ECS_CLUSTER: hotelbooking-cluster
  BACKEND_SERVICE: hotelbooking-backend-service
  FRONTEND_SERVICE: hotelbooking-frontend-service

jobs:
  # 🔍 Code Quality & Security Analysis
  code-analysis:
    name: 🔍 Code Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
      
      - name: 📦 Install Backend Dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: 📦 Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: 🧹 ESLint Backend
        working-directory: ./backend
        run: npm run lint || true
      
      - name: 🧹 ESLint Frontend
        working-directory: ./frontend
        run: npm run lint || true
      
      - name: 🧪 Backend Tests
        working-directory: ./backend
        run: npm test || true
        env:
          NODE_ENV: test
      
      - name: 🧪 Frontend Tests
        working-directory: ./frontend
        run: npm test || true
        env:
          NODE_ENV: test
      
      - name: 🔒 Security Audit Backend
        working-directory: ./backend
        run: npm audit --audit-level moderate || true
      
      - name: 🔒 Security Audit Frontend
        working-directory: ./frontend
        run: npm audit --audit-level moderate || true
      
      - name: 🛡️ Run Security Tests
        run: |
          chmod +x ./production-config/run-security-tests.sh
          ./production-config/run-security-tests.sh quick || true
        env:
          TEST_BASE_URL: http://localhost:8080

  # 🏗️ Build & Test
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: [code-analysis]
    if: always() && (needs.code-analysis.result == 'success' || needs.code-analysis.result == 'skipped')
    
    outputs:
      backend-image: ${{ steps.build-backend.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}
      image-tag: ${{ steps.vars.outputs.tag }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Set up variables
        id: vars
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
          fi
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
      
      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: 🔑 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: 🏗️ Build Backend Image
        id: build-backend
        working-directory: ./backend
        run: |
          IMAGE_TAG=${{ steps.vars.outputs.tag }}
          IMAGE_URI=$ECR_REGISTRY/$BACKEND_REPOSITORY:$IMAGE_TAG
          
          docker build \
            --tag $IMAGE_URI \
            --tag $ECR_REGISTRY/$BACKEND_REPOSITORY:latest \
            --label "git.commit=$GITHUB_SHA" \
            --label "git.branch=${GITHUB_REF#refs/heads/}" \
            --label "build.date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --label "build.url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            .
          
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT
      
      - name: 🏗️ Build Frontend Image
        id: build-frontend
        working-directory: ./frontend
        run: |
          IMAGE_TAG=${{ steps.vars.outputs.tag }}
          IMAGE_URI=$ECR_REGISTRY/$FRONTEND_REPOSITORY:$IMAGE_TAG
          
          docker build \
            --tag $IMAGE_URI \
            --tag $ECR_REGISTRY/$FRONTEND_REPOSITORY:latest \
            --label "git.commit=$GITHUB_SHA" \
            --label "git.branch=${GITHUB_REF#refs/heads/}" \
            --label "build.date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --label "build.url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            .
          
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT
      
      - name: 🧪 Test Backend Container
        run: |
          docker run --rm -d --name backend-test \
            -e NODE_ENV=test \
            -p 8080:8080 \
            ${{ steps.build-backend.outputs.image }}
          
          # Wait for container to start
          sleep 10
          
          # Health check
          curl -f http://localhost:8080/api/health || exit 1
          
          # Stop container
          docker stop backend-test
      
      - name: 🧪 Test Frontend Container
        run: |
          docker run --rm -d --name frontend-test \
            -p 3000:80 \
            ${{ steps.build-frontend.outputs.image }}
          
          # Wait for container to start
          sleep 5
          
          # Health check
          curl -f http://localhost:3000/health || exit 1
          
          # Stop container
          docker stop frontend-test
      
      - name: 🔍 Scan Backend Image for Vulnerabilities
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --exit-code 0 --severity HIGH,CRITICAL \
            ${{ steps.build-backend.outputs.image }}
      
      - name: 🔍 Scan Frontend Image for Vulnerabilities
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --exit-code 0 --severity HIGH,CRITICAL \
            ${{ steps.build-frontend.outputs.image }}

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: 🔑 Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: 📤 Push Backend Image
        run: |
          docker pull ${{ needs.build-and-test.outputs.backend-image }}
          docker push ${{ needs.build-and-test.outputs.backend-image }}
          docker push $ECR_REGISTRY/$BACKEND_REPOSITORY:latest
      
      - name: 📤 Push Frontend Image
        run: |
          docker pull ${{ needs.build-and-test.outputs.frontend-image }}
          docker push ${{ needs.build-and-test.outputs.frontend-image }}
          docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY:latest
      
      - name: 🔄 Update ECS Service - Backend
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER-staging \
            --service $BACKEND_SERVICE-staging \
            --force-new-deployment
      
      - name: 🔄 Update ECS Service - Frontend
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER-staging \
            --service $FRONTEND_SERVICE-staging \
            --force-new-deployment
      
      - name: ⏳ Wait for Staging Deployment
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER-staging \
            --services $BACKEND_SERVICE-staging $FRONTEND_SERVICE-staging
      
      - name: 🧪 Run Integration Tests on Staging
        run: |
          chmod +x ./production-config/run-security-tests.sh
          ./production-config/run-security-tests.sh comprehensive
        env:
          TEST_BASE_URL: https://staging.hotelbooking.com

  # 🚀 Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: 🔑 Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: 📤 Push Production Images
        run: |
          # Tag and push with production tag
          docker pull ${{ needs.build-and-test.outputs.backend-image }}
          docker tag ${{ needs.build-and-test.outputs.backend-image }} $ECR_REGISTRY/$BACKEND_REPOSITORY:production
          docker push $ECR_REGISTRY/$BACKEND_REPOSITORY:production
          
          docker pull ${{ needs.build-and-test.outputs.frontend-image }}
          docker tag ${{ needs.build-and-test.outputs.frontend-image }} $ECR_REGISTRY/$FRONTEND_REPOSITORY:production
          docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY:production
      
      - name: 📋 Create ECS Task Definitions
        run: |
          # Update task definitions with new image URIs
          aws ecs describe-task-definition \
            --task-definition $BACKEND_SERVICE \
            --query taskDefinition > backend-task-def.json
          
          aws ecs describe-task-definition \
            --task-definition $FRONTEND_SERVICE \
            --query taskDefinition > frontend-task-def.json
          
          # Update image URIs in task definitions
          jq --arg IMAGE "${{ needs.build-and-test.outputs.backend-image }}" \
            '.containerDefinitions[0].image = $IMAGE' \
            backend-task-def.json > backend-task-def-updated.json
          
          jq --arg IMAGE "${{ needs.build-and-test.outputs.frontend-image }}" \
            '.containerDefinitions[0].image = $IMAGE' \
            frontend-task-def.json > frontend-task-def-updated.json
      
      - name: 🔄 Deploy Backend to Production
        run: |
          aws ecs register-task-definition \
            --family $BACKEND_SERVICE \
            --cli-input-json file://backend-task-def-updated.json
          
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $BACKEND_SERVICE \
            --task-definition $BACKEND_SERVICE \
            --force-new-deployment
      
      - name: 🔄 Deploy Frontend to Production
        run: |
          aws ecs register-task-definition \
            --family $FRONTEND_SERVICE \
            --cli-input-json file://frontend-task-def-updated.json
          
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $FRONTEND_SERVICE \
            --task-definition $FRONTEND_SERVICE \
            --force-new-deployment
      
      - name: ⏳ Wait for Production Deployment
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $BACKEND_SERVICE $FRONTEND_SERVICE
      
      - name: 🏥 Production Health Check
        run: |
          for i in {1..30}; do
            if curl -f https://api.hotelbooking.com/health; then
              echo "Production health check passed"
              break
            fi
            echo "Health check attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done
      
      - name: 🧪 Run Production Smoke Tests
        run: |
          chmod +x ./production-config/run-security-tests.sh
          ./production-config/run-security-tests.sh quick
        env:
          TEST_BASE_URL: https://api.hotelbooking.com
      
      - name: 📊 Update CloudWatch Dashboard
        run: |
          aws cloudwatch put-dashboard \
            --dashboard-name "HotelBooking-Production" \
            --dashboard-body file://./aws-infrastructure/cloudwatch-dashboard.json

  # 📢 Notifications
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: 📧 Send Success Notification
        if: needs.deploy-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: |
            🎉 Hotel Booking System deployed successfully to production!
            
            📋 Details:
            • Version: ${{ github.ref_name }}
            • Commit: ${{ github.sha }}
            • Author: ${{ github.actor }}
            • Environment: Production
            
            🔗 Links:
            • Production: https://hotelbooking.com
            • API: https://api.hotelbooking.com
            • Monitoring: https://monitoring.hotelbooking.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: 📧 Send Failure Notification
        if: needs.deploy-production.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          message: |
            ❌ Hotel Booking System deployment to production failed!
            
            📋 Details:
            • Version: ${{ github.ref_name }}
            • Commit: ${{ github.sha }}
            • Author: ${{ github.actor }}
            • Workflow: ${{ github.workflow }}
            
            🔗 Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: 📩 Send Email Notification
        if: needs.deploy-production.result == 'success'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.NOTIFICATION_EMAIL }}
          password: ${{ secrets.NOTIFICATION_EMAIL_PASSWORD }}
          subject: "🚀 Production Deployment Successful - Hotel Booking System"
          to: ${{ secrets.TEAM_EMAIL_LIST }}
          from: "GitHub Actions <${{ secrets.NOTIFICATION_EMAIL }}>"
          html_body: |
            <h2>🎉 Deployment Successful!</h2>
            <p>The Hotel Booking System has been successfully deployed to production.</p>
            
            <h3>📋 Deployment Details</h3>
            <ul>
              <li><strong>Version:</strong> ${{ github.ref_name }}</li>
              <li><strong>Commit:</strong> ${{ github.sha }}</li>
              <li><strong>Author:</strong> ${{ github.actor }}</li>
              <li><strong>Date:</strong> ${{ github.event.head_commit.timestamp }}</li>
            </ul>
            
            <h3>🔗 Quick Links</h3>
            <ul>
              <li><a href="https://hotelbooking.com">Production Website</a></li>
              <li><a href="https://api.hotelbooking.com">API Endpoint</a></li>
              <li><a href="https://monitoring.hotelbooking.com">Monitoring Dashboard</a></li>
            </ul>
            
            <p><em>This is an automated notification from GitHub Actions.</em></p>

  # 🧹 Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: 🧹 Clean up old ECR images
        run: |
          # Keep only the latest 10 images
          aws ecr list-images \
            --repository-name $BACKEND_REPOSITORY \
            --filter tagStatus=UNTAGGED \
            --query 'imageIds[?imageDigest!=null]|sort_by(@, &imagePushedAt)|[:-10]' \
            --output json | \
          jq '.[] | select(.imageDigest != null)' | \
          aws ecr batch-delete-image \
            --repository-name $BACKEND_REPOSITORY \
            --image-ids file:///dev/stdin || true
          
          aws ecr list-images \
            --repository-name $FRONTEND_REPOSITORY \
            --filter tagStatus=UNTAGGED \
            --query 'imageIds[?imageDigest!=null]|sort_by(@, &imagePushedAt)|[:-10]' \
            --output json | \
          jq '.[] | select(.imageDigest != null)' | \
          aws ecr batch-delete-image \
            --repository-name $FRONTEND_REPOSITORY \
            --image-ids file:///dev/stdin || true
      
      - name: 📊 Update Deployment Metrics
        run: |
          aws cloudwatch put-metric-data \
            --namespace "HotelBooking/Deployments" \
            --metric-data \
              MetricName=DeploymentCount,Value=1,Unit=Count \
              MetricName=DeploymentSuccess,Value=1,Unit=Count