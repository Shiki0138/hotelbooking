# Hotel Booking System - Production Docker Compose
# 史上最強の本番環境構成 - worker4実装
# Created: 2025-06-29

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hotelbooking-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hotelbooking}
      POSTGRES_USER: ${POSTGRES_USER:-hotelbooking_app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./backend/database/production-permissions.sql:/docker-entrypoint-initdb.d/02-permissions.sql:ro
    networks:
      - hotelbooking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hotelbooking_app} -d ${POSTGRES_DB:-hotelbooking}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=mod
      -c log_min_duration_statement=1000
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hotelbooking-redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./production-config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - hotelbooking-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: hotelbooking-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8080
      DATABASE_URL: postgresql://${POSTGRES_USER:-hotelbooking_app}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-hotelbooking}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://hotelbooking.com}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - hotelbooking-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: hotelbooking-frontend
    restart: unless-stopped
    environment:
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx/conf.d
    volumes:
      - frontend_logs:/var/log/nginx
    networks:
      - hotelbooking-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Load Balancer / Reverse Proxy
  nginx-lb:
    image: nginx:alpine
    container_name: hotelbooking-nginx-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./production-config/nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./production-config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - hotelbooking-network
    depends_on:
      frontend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: hotelbooking-prometheus
    restart: unless-stopped
    volumes:
      - ./production-config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - hotelbooking-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    security_opt:
      - no-new-privileges:true

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: hotelbooking-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./production-config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./production-config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - hotelbooking-network
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true

  # Log Management - Loki
  loki:
    image: grafana/loki:latest
    container_name: hotelbooking-loki
    restart: unless-stopped
    volumes:
      - ./production-config/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - hotelbooking-network
    command: -config.file=/etc/loki/local-config.yaml
    security_opt:
      - no-new-privileges:true

  # Log Collector - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: hotelbooking-promtail
    restart: unless-stopped
    volumes:
      - ./production-config/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - backend_logs:/var/log/backend:ro
      - frontend_logs:/var/log/frontend:ro
      - nginx_logs:/var/log/nginx:ro
    networks:
      - hotelbooking-network
    depends_on:
      - loki
    command: -config.file=/etc/promtail/config.yml
    security_opt:
      - no-new-privileges:true

# Networks
networks:
  hotelbooking-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  frontend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local